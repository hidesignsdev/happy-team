{"ast":null,"code":"var _jsxFileName = \"/home/nguyenchicong/Documents/A/happy-team/random-quote-machine/src/App.js\";\nimport React, { Component } from 'react';\nimport RandomQuote from './components/RandomQuote';\nimport { Provider, connect } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst action = () => {\n  return {\n    type: 'Click',\n    quote: this.props.quote,\n    author: this.props.author,\n    color: this.props.color\n  };\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'Click':\n      return {\n        color: action.color,\n        author: action.author,\n        quote: action.quote\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClick: () => {\n      dispatch(action());\n    }\n  };\n};\n\nconst Contain = connect(mapStateToProps, mapDispatchToProps)(RandomQuote);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log('constructor runs');\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount runs');\n  }\n\n  render() {\n    console.log('render method runs');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Contain, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/nguyenchicong/Documents/A/happy-team/random-quote-machine/src/App.js"],"names":["React","Component","RandomQuote","Provider","connect","createStore","action","type","quote","props","author","color","reducer","state","store","mapStateToProps","mapDispatchToProps","dispatch","onClick","Contain","App","constructor","console","log","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAAQC,QAAR,EAAiBC,OAAjB,QAA+B,aAA/B;AACA,SAAQC,WAAR,QAA0B,OAA1B;;AAIA,MAAMC,MAAM,GAAC,MAAI;AACf,SAAO;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,KAAK,EAAC,KAAKC,KAAL,CAAWD,KAFZ;AAGLE,IAAAA,MAAM,EAAC,KAAKD,KAAL,CAAWC,MAHb;AAILC,IAAAA,KAAK,EAAC,KAAKF,KAAL,CAAWE;AAJZ,GAAP;AAOD,CARD;;AAUA,MAAMC,OAAO,GAAE,CAACC,KAAD,EAAOP,MAAP,KAAgB;AAC7B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,OAAL;AACE,aAAM;AACJI,QAAAA,KAAK,EAACL,MAAM,CAACK,KADT;AAEJD,QAAAA,MAAM,EAACJ,MAAM,CAACI,MAFV;AAGJF,QAAAA,KAAK,EAACF,MAAM,CAACE;AAHT,OAAN;;AAKA;AAAU,aAAOK,KAAP;AAPd;AASD,CAVD;;AAWA,MAAMC,KAAK,GAACT,WAAW,CAACO,OAAD,CAAvB;;AACA,MAAMG,eAAe,GAAEF,KAAD,IAAS;AAC7B,SAAOA,KAAP;AACD,CAFD;;AAGA,MAAMG,kBAAkB,GAAGC,QAAD,IAAY;AACpC,SAAO;AACLC,IAAAA,OAAO,EAAE,MAAK;AACZD,MAAAA,QAAQ,CAACX,MAAM,EAAP,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAOA,MAAMa,OAAO,GAACf,OAAO,CAACW,eAAD,EAAkBC,kBAAlB,CAAP,CAA6Cd,WAA7C,CAAd;;AACA,MAAMkB,GAAN,SAAkBnB,SAAlB,CAA4B;AAC1BoB,EAAAA,WAAW,CAACZ,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEAa,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBF,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACPH,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAET,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AApByB;;AAsB5B,eAAeM,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport RandomQuote from './components/RandomQuote'\nimport {Provider,connect} from 'react-redux';\nimport {createStore} from 'redux';\n\n\n\nconst action=()=>{\n  return {\n    type: 'Click',\n    quote:this.props.quote,\n    author:this.props.author,\n    color:this.props.color\n    \n  }\n}\n\nconst reducer =(state,action)=>{\n  switch(action.type){\n    case 'Click':\n      return{\n        color:action.color,\n        author:action.author,\n        quote:action.quote\n      }\n      default : return state;\n  }\n}\nconst store=createStore(reducer);\nconst mapStateToProps=(state)=>{\n  return state;\n}\nconst mapDispatchToProps =(dispatch)=>{\n  return {\n    onClick: () =>{\n      dispatch(action());\n    }\n  }\n}\nconst Contain=connect(mapStateToProps, mapDispatchToProps)(RandomQuote);\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    console.log('constructor runs')\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount runs')\n  }\n\n  render() {\n    console.log('render method runs')\n    return (\n      <div>\n        <Provider store={store}>\n          <Contain/>\n          </Provider>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}